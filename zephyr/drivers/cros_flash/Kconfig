# Copyright 2020 The ChromiumOS Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

menuconfig CROS_FLASH_NPCX
	bool "Nuvoton NPCX flash driver for the Zephyr shim"
	default y
	depends on DT_HAS_NUVOTON_NPCX_CROS_FLASH_ENABLED
	select PLATFORM_EC_FLASH_CROS
	select PLATFORM_EC_SPI_FLASH_REGS
	help
	  This option enables a flash unit interface (FIU) driver for the NPCX
	  chip. This is used instead of the flash memory interface so we can
	  continue to use most of the existing flash memory processing code in
	  ECOS.

if CROS_FLASH_NPCX

config CROS_FLASH_NPCX_INIT_PRIORITY
	int "Nuvoton NPCX flash driver priority for the Zephyr shim"
	default 85
	help
	  This sets the priority of the NPCX flash driver for zephyr shim.
	  This driver depends on the NPCX QSPI bus controller and NPCX NOR flash
	  drivers. Its priority must be lower than CONFIG_FLASH_NPCX_FIU_NOR_INIT.

endif # CROS_FLASH_NPCX

config CROS_FLASH_IT8XXX2
	bool "ITE IT81202 flash driver for the Zephyr shim"
	depends on SOC_FAMILY_RISCV_ITE
	default y
	select PLATFORM_EC_FLASH_CROS
	help
	  This option enables the flash driver for the it8xxx2 chip. We can
	  access the flash by read, write and erase. The it8xxx2 flash size
	  is 1M byte.

config CROS_FLASH_XEC
	bool "Microchip XEC flash driver for the Zephyr shim"
	default y
	depends on DT_HAS_MICROCHIP_XEC_CROS_FLASH_ENABLED
	select PLATFORM_EC_FLASH_CROS
	select PLATFORM_EC_SPI_FLASH_REGS
	help
	  This option enables the flash driver for the MEC172x chips. Flash
	  access is via the QSPI driver to one of three ports: internal 512KB
	  SPI flash in the MEC1727 or external shared or private ports on
	  MEC1723, etc.

if CROS_FLASH_XEC

config CROS_FLASH_XEC_INIT_PRIORITY
	int "Microchip XEC flash driver priority for the Zephyr shim"
	default 85
	help
	  This sets the priority of the MCHP flash driver for zephyr shim.
	  This driver depends on the SPI controller and SPI NOR flash drivers.
	  Its priority must be lower than CONFIG_SPI_INIT_PRIORITY and
	  CONFIG_SPI_NOR_INIT_PRIORITY.

endif # CROS_FLASH_XEC

config CROS_FLASH
	bool "Generic cros-flash driver for the Zephyr shim"
	depends on DT_HAS_CROS_EC_CROS_FLASH_ENABLED
	default y
	select PLATFORM_EC_FLASH_CROS
	help
	  This option enables the cros-flash driver used by EC code.
	  This driver actually acts as a translation layer between Zephyr flash
	  driver and EC flash protection flags (ro_now, ro_at_boot, etc.). The
	  driver uses a backend to perform flash specific operations, e.g.
	  change protection settings.

if CROS_FLASH

config CROS_FLASH_HAS_READOUT_PROTECTION
	bool
	help
	  This option is enabled if readout protection is supported.

choice CROS_FLASH_BACKEND
	prompt "Backend for cros-flash driver"
	default CROS_FLASH_BACKEND_STM32 if SOC_FAMILY_STM32
	help
	  Backend for cros-flash driver provides functions responsible for
	  changing write protection and readout protection state, blocking
	  flash protection changes or basic flash operations.

	  Backend performs these operations using extended operations exposed by
	  flash API or can interact with the hardware directly.

config CROS_FLASH_BACKEND_STM32
	bool "STM32 backend for cros-flash driver"
	depends on SOC_FLASH_STM32
	select CROS_FLASH_HAS_READOUT_PROTECTION if FLASH_STM32_READOUT_PROTECTION
	select FLASH_EX_OP_ENABLED
	select FLASH_STM32_WRITE_PROTECT

config CROS_FLASH_BACKEND_FAKE
	bool "Fake backend for cros-flash driver"
	select CROS_FLASH_HAS_READOUT_PROTECTION
	help
	  Fake backend is just set functions provided by test. It's used to test
	  the driver only.
endchoice

config CROS_FLASH_READOUT_PROTECTION
	bool "Enable flash readout protection"
	depends on CROS_FLASH_HAS_READOUT_PROTECTION
	default n
	help
	  This option enables support for readout protection in cros-flash driver.

config CROS_FLASH_CUSTOM_JUMP_STRUCTURE
	bool "Use custom functions to encode/decode flash jump data"
	help
	  If enabled, the driver will call decode_wp_from_sysjump() and
	  prepare_wp_jump() to decode/encode flash jump data.

config CROS_FLASH_INIT_PRIORITY
	int "Generic flash driver priority for the Zephyr shim"
	default 55
	help
	  This sets the priority of the cros-flash driver for Zephyr shim.
	  This driver depends on the flash-controller driver in Zephyr.
	  Its priority must be lower than CONFIG_FLASH_INIT_PRIORITY.

# Backend-specific configs

config CROS_FLASH_STM32_EC_JUMP_STRUCTURE
	bool "Enable backward compatibility with EC flash jump structure"
	depends on CROS_FLASH_BACKEND_STM32 && SOC_SERIES_STM32F4X
	default n
	select CROS_FLASH_CUSTOM_JUMP_STRUCTURE
	help
	  This option enables backward compatibility with EC flash protection
	  data. During sysjump, flash protection information is saved in jump
	  tags. The part we've jumped to will read the data, so it will report
	  protection correctly. This includes the code for coverting the data
	  between old and new formats.

endif # CROS_FLASH
