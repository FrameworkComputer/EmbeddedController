
/* Copyright 2024 The ChromiumOS Authors
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */
/* Corsola program common DTS includes */
#include <cros/thermistor/thermistor.dtsi>
#include "../common.dtsi"
#include "../power_signal.dtsi"
#include "../usba.dtsi"
#include "../ite_adc.dtsi"
#include "../ite_gpio.dtsi"
#include "../ite_keyboard.dtsi"
#include "../ite_i2c.dtsi"
#include "../ite_interrupts.dtsi"
#include "../ite_usbc.dtsi"
#include "../ite_shi.dtsi"
#include "./cbi.dtsi"
#include "./keyboard.dtsi"
#include "./thermistor.dtsi"
#include "../ite_motionsense.dtsi"
#include "./pwm_leds.dtsi"

/ {
	aliases {
		/*
		 * motion sense's <>_INT_EVENT is handled
		 * by alias. Using the alias, each driver creates
		 * its own <>_INT_EVENT.
		 */
		bmi3xx-int = &base_accel;
		bma4xx-int = &lid_accel;
	};

	named-gpios {
		/delete-node/ usb_c0_ppc_bc12_int_odl;
		usb_c0_ppc_int_odl: usb_c0_ppc_int_odl {
			gpios = <&gpiod 1 GPIO_INPUT>;
			enum-name = "GPIO_USB_C0_PPC_INT_ODL";
		};
		/delete-node/ usb_c0_ppc_frsinfo;
		usb_c0_frs_en: usb_c0_frs_en {
			gpios = <&gpiof 0 GPIO_OUTPUT_LOW>;
			enum-name = "GPIO_USB_C0_FRS_EN";
		};
		usb_a1_fault_odl: usb_a1_fault_odl {
			gpios = <&gpioh 6 GPIO_INPUT>;
		};
		en_pp5000_usb_a1_vbus_x: en_pp5000_usb_a1_vbus_x {
			gpios = <&gpioa 7 GPIO_OUTPUT_LOW>;
		};
		gpio_battery_led_amber_l: battery_led_amber_l {
			gpios = <&gpioa 1 GPIO_OUTPUT_HIGH>;
		};
		gpio_battery_led_white_l: battery_led_white_l {
			gpios = <&gpioa 2 GPIO_OUTPUT_HIGH>;
		};
	};
	unused-pins {
		unused-gpios =
			/* pg_pp5000_z2_od */
			<&gpiod 2 GPIO_INPUT>,
			/* pg_mt6315_proc_b_odl */
			<&gpioe 1 GPIO_INPUT>,
			/* ec_pen_chg_dis_odl */
			<&gpioh 3 GPIO_ODR_HIGH>,
			/* usb_c1_bc12_charger_int_odl */
			<&gpioj 4 GPIO_INPUT>,
			/* unnamed nc pins */
			<&gpioh 2 GPIO_INPUT_PULL_DOWN>,
			<&gpioa 3 GPIO_INPUT_PULL_DOWN>,
			<&gpioa 6 GPIO_INPUT_PULL_DOWN>,
			<&gpiof 1 GPIO_INPUT_PULL_DOWN>,
			<&gpiod 7 GPIO_INPUT_PULL_DOWN>,
			<&gpioh 0 GPIO_INPUT_PULL_DOWN>,
			<&gpioi 3 GPIO_INPUT_PULL_DOWN>,
			<&gpioi 6 GPIO_INPUT_PULL_DOWN>,
			<&gpioi 7 GPIO_INPUT_PULL_DOWN>,
			<&gpiom 6 (GPIO_INPUT_PULL_DOWN | GPIO_VOLTAGE_1P8)>,
			/* spi_clk_gpg6 */
			<&gpiog 6 GPIO_INPUT_PULL_UP>,
			/* spi_mosi_gpg4 */
			<&gpiog 4 GPIO_OUTPUT_LOW>,
			/* spi_miso_gpg5 */
			<&gpiog 5 GPIO_OUTPUT_LOW>,
			/* spi_cs_gpg7 */
			<&gpiog 7 GPIO_OUTPUT_LOW>;
	};
	gpio-interrupts {
		/delete-node/ x_ec_gpio2;
		/delete-node/ usb_c0_ppc_bc12;
		int_base_imu: base_imu {
			handler = "base_sensor_interrupt";
		};
		int_lid_imu: lid_imu {
			handler = "lid_sensor_interrupt";
		};
		int_usb_c0_ppc: usb_c0_ppc {
			irq-pin = <&usb_c0_ppc_int_odl>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "ppc_interrupt";
		};
		int_x_ec_gpio2: x_ec_gpio2 {
			irq-pin = <&gpio_x_ec_gpio2>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "hdmi_hpd_interrupt";
		};
	};
	usbc {
		port0@0 {
			ppc = <&ppc_port0>;
		};
		port1@1 {
			/delete-property/ bc12;
			/delete-property/ ppc;
			/delete-property/ tcpc;
			/delete-property/ usb-mux-chain-1;
			/delete-property/ usb-mux-chain-1-hdmi-db;
			usb-mux-chain-1 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_1>;
			};
		};
	};
	named-adc-channels {
		adc_ambient: ambient {
			enum-name = "ADC_TEMP_SENSOR_2_AMBIENT";
			io-channels = <&adc0 5>;
		};
	};
	named-i2c-ports {
		compatible = "named-i2c-ports";
		/delete-node/ usb-c1;
		i2c_hdmi: i2c_hdmi {
			i2c-port = <&i2c4>;
			enum-names = "I2C_PORT_USB_C1",
				"I2C_PORT_USB_MUX1";
		};
	};
	named-temp-sensors {
		compatible = "cros-ec,temp-sensors";
		temp_charger: charger {
			temp_host_high = <68>;
			temp_host_halt = <90>;
			temp_host_release_high = <59>;
			sensor = <&charger_bc12_port1>;
		};
	};

	/*
	 * Declare mutexes used by sensor drivers.
	 * A mutex node is used to create an instance of mutex_t.
	 * A mutex node is referenced by a sensor node if the
	 * corresponding sensor driver needs to use the
	 * instance of the mutex.
	 */
	motionsense-mutex {
		base_mutex_bmi323: bmi323-mutex {
		};

		lid_mutex_bma422: bma422-mutex {
		};
	};

	/* Rotation matrix used by drivers. */
	motionsense-rotation-ref {
		lid_rot_ref_bma422: lid-rotation-ref-bma422 {
			mat33 = <0 1 0
				 1 0 0
				 0 0 (-1)>;
		};

		base_rot_ref_bmi323: base-rotation-ref-bmi323 {
			mat33 = <0 1 0
				 (-1) 0 0
				 0 0 1>;
		};
	};

	/*
	 * Driver specific data. A driver-specific data can be shared with
	 * different motion sensors while they are using the same driver.
	 *
	 * If a node's compatible starts with "cros-ec,accelgyro-", it is for
	 * a common structure defined in accelgyro.h.
	 * e.g) compatible = "cros-ec,accelgyro-als-drv-data" is for
	 * "struct als_drv_data_t" in accelgyro.h
	 */
	motionsense-sensor-data {
		bmi323_data: bmi323-drv-data {
			compatible = "cros-ec,drvdata-bmi3xx";
			status = "okay";
		};

		bma422_data: bma422-drv-data {
			compatible = "cros-ec,drvdata-bma4xx";
			status = "okay";
		};
	};
	motionsense-sensor {
		/delete-node/ lid_accel;
		/delete-node/ base-accel;
		/delete-node/ base-gyro;
		lid_accel: lid-accel {
			compatible = "cros-ec,bma4xx";
			status = "okay";

			active-mask = "SENSOR_ACTIVE_S0_S3";
			location = "MOTIONSENSE_LOC_LID";
			mutex = <&lid_mutex_bma422>;
			port = <&i2c_sensor>;
			rot-standard-ref = <&lid_rot_ref_bma422>;
			default-range = <2>;
			drv-data = <&bma422_data>;
			i2c-spi-addr-flags = "BMA4_I2C_ADDR_PRIMARY";
			configs {
				compatible =
					"cros-ec,motionsense-sensor-config";
				ec-s0 {
					odr = <(10000 | ROUND_UP_FLAG)>;
				};
				ec-s3 {
					odr = <(10000 | ROUND_UP_FLAG)>;
				};
			};
		};

		base_accel: base-accel {
			compatible = "cros-ec,bmi3xx-accel";
			status = "okay";

			active-mask = "SENSOR_ACTIVE_S0_S3";
			location = "MOTIONSENSE_LOC_BASE";
			mutex = <&base_mutex>;
			port = <&i2c_sensor>;
			rot-standard-ref = <&base_rot_ref>;
			drv-data = <&bmi323_data>;
			configs {
				compatible =
					"cros-ec,motionsense-sensor-config";
				ec-s0 {
					odr = <(10000 | ROUND_UP_FLAG)>;
				};
				ec-s3 {
					odr = <(10000 | ROUND_UP_FLAG)>;
				};
			};
		};

		base_gyro: base-gyro {
			compatible = "cros-ec,bmi3xx-gyro";
			status = "okay";

			active-mask = "SENSOR_ACTIVE_S0_S3";
			location = "MOTIONSENSE_LOC_BASE";
			mutex = <&base_mutex>;
			port = <&i2c_sensor>;
			rot-standard-ref = <&base_rot_ref>;
			drv-data = <&bmi323_data>;
		};
	};
	batteries {
		default_battery: 313_b7_32_a {
			compatible = "nvt,313-b7-32-a", "battery-smart";
		};
		313_ac_32_a {
			compatible = "cosmx,313-ac-32-a", "battery-smart";
		};
		313_2d_32_a {
			compatible = "dynapack,313-2d-32-a", "battery-smart";
		};
		333_2c_32_a {
			compatible = "dynapack,333-2c-32-a", "battery-smart";
		};
		313_12_32_a {
			compatible = "smp,313-12-32-a", "battery-smart";
		};
		333_17_32_a {
			compatible = "smp,333-17-32-a", "battery-smart";
		};
		333_cf_32_a {
			compatible = "sunwoda,333-cf-32-a", "battery-smart";
		};
	};
};
&adc0 {
	pinctrl-0 = <&adc0_ch0_gpi0_default
		     &adc0_ch1_gpi1_default
		     &adc0_ch2_gpi2_default
			 &adc0_ch5_gpi5_default>;
};
&i2c0 {
	charger_bc12_port1: rt9490@53 {
		thermistor = <&thermistor_rt9490>;
	};
};
&i2c2 {
	ppc_port0: syv682x@40 {
		compatible = "silergy,syv682x";
		status = "okay";
		reg = <0x40>;
		frs_en_gpio = <&usb_c0_frs_en>;
	};
};
&i2c4 {
	/delete-node/ tusb1064-mux-1@44;
	/delete-node/ ps8743_mux_1;
};

/* Veluza usba port enable config */
&usba_port_enable_list {
	enable-pins = <&en_pp5000_usb_a0_vbus
		       &en_pp5000_usb_a1_vbus_x>;
};
