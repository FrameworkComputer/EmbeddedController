/* Copyright 2023 The ChromiumOS Authors
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */
#include <cros/thermistor/thermistor.dtsi>
#include <dt-bindings/pwm/pwm.h>
#include <it8xxx2_emul.dts>
#include "../program/nissa/cbi.dtsi"
#include "../program/nissa/gothrax/cbi.dtsi"
#include "../program/nissa/gothrax/motionsense.dtsi"
/ {
	aliases {
		gpio-usb-c1-int-odl = &gpio_sb_1;
	};

	named-gpios {
		compatible = "named-gpios";

		gpio_ec_entering_rw: ec_entering_rw {
			gpios = <&gpioc 7 GPIO_OUTPUT>;
			enum-name = "GPIO_ENTERING_RW";
		};
		gpio_en_usb_c0_cc1_vconn: en_usb_c0_cc1_vconn {
			gpios = <&gpioh 4 GPIO_OUTPUT>;
		};
		gpio_en_usb_c0_cc2_vconn: en_usb_c0_cc2_vconn {
			gpios = <&gpioh 6 GPIO_OUTPUT>;
		};
		gpio_usb_c0_int_odl: usb_c0_int_odl {
			gpios = <&gpiok 0 GPIO_INPUT_PULL_UP>;
		};
		gpio_sb_1: sb_1 {
			gpios = <&gpioe 6 0>;
			no-auto-init;
		};
		gpio_imu_int_l: imu_int_l {
			gpios = <&gpioa 7 GPIO_INPUT>;
		};
		gpio_acc_int_l: acc_int_l {
			gpios = <&gpioc 0 GPIO_INPUT>;
		};
		gpio_tablet_mode_l: tablet_mode_l {
			gpios = <&gpioj 0 GPIO_INPUT>;
			enum-name = "GPIO_TABLET_MODE_L";
		};
		gpio_fan_enable: fan-enable {
			gpios = <&gpiog 3 GPIO_OUTPUT>;
			no-auto-init;
		};
		gpio_ec_soc_dsw_pwrok: ec_soc_dsw_pwrok {
			gpios = <&gpiol 7 GPIO_OUTPUT>;
			no-auto-init;
		};
	};

	gpio-interrupts {
		compatible = "cros-ec,gpio-interrupts";

		int_imu: ec_imu {
			irq-pin = <&gpio_imu_int_l>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "motion_interrupt";
		};
		int_lid_imu: lid_imu {
			irq-pin = <&gpio_acc_int_l>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "lid_accel_interrupt";
		};
		int_tablet_mode: tablet_mode {
			irq-pin = <&gpio_tablet_mode_l>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "gmr_tablet_switch_isr";
		};
	};
	named-i2c-ports {
		compatible = "named-i2c-ports";

		i2c_ec_i2c_batt: ec_i2c_batt {
			i2c-port = <&i2c0>;
			enum-names = "I2C_PORT_BATTERY";
		};
		i2c_ec_i2c_sensor: ec_i2c_sensor {
			i2c-port = <&i2c2>;
			enum-names = "I2C_PORT_SENSOR";
		};
	};

	usbc {
		#address-cells = <1>;
		#size-cells = <0>;
		port0@0 {
			compatible = "named-usbc-port";
			reg = <0>;
			tcpc = <&tcpci_emul_0>;
			usb-mux-chain-0 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_0>;
			};
		};
		port1@1 {
			compatible = "named-usbc-port";
			reg = <1>;
			tcpc = <&tcpci_emul_1>;
			usb-mux-chain-1 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_1 &anx7483_port1>;
			};
		};
		port0-muxes {
			virtual_mux_0: virtual-mux-0 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
		port1-muxes {
			virtual_mux_1: virtual-mux-1 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
	};
	pwms {
		#address-cells = <1>;
		#size-cells = <1>;
		pwm2: pwm@6 {
			compatible = "cros,pwm-mock";
			reg = <6 2>;
			#pwm-cells = <3>;
			status = "okay";
		};
	};
	tachs {
		#address-cells = <1>;
		#size-cells = <1>;
		tach1: tach@1 {
			compatible = "cros,tach-mock";
			reg = <1 1>;
			#tach-cells = <3>;
			status = "okay";
		};
	};
	fans {
		compatible = "cros-ec,fans";
		fan0: fan_0 {
			pwms = <&pwm2 2 PWM_KHZ(25) PWM_POLARITY_NORMAL>;
			tach = <&tach1>;
			rpm_min = <2500>;
			rpm_start = <2500>;
			rpm_max = <4800>;
			rpm_deviation = <1>;
			enable_gpio = <&gpio_fan_enable>;
		};
	};
	fan_steps {
		compatible = "cros-ec,fan-steps";
		level_0 {
			temp_on = <36 0 0>;
			temp_off = <99 0 0>;
			rpm_target = <0>;
		};
		level_1 {
			temp_on = <41 0 0>;
			temp_off = <38 0 0>;
			rpm_target = <3000>;
		};
		level_2 {
			temp_on = <47 0 0>;
			temp_off = <44 0 0>;
			rpm_target = <3500>;
		};
		level_3 {
			temp_on = <53 0 0>;
			temp_off = <50 0 0>;
			rpm_target = <4000>;
		};
		level_4 {
			temp_on = <63 0 0>;
			temp_off = <60 0 0>;
			rpm_target = <4500>;
		};
		level_5 {
			temp_on = <70 0 0>;
			temp_off = <67 0 0>;
			rpm_target = <4800>;
		};
	};
	named-adc-channels {
		compatible = "named-adc-channels";
		adc_temp_sensor_1: temp_sensor_1 {
			enum-name = "ADC_TEMP_SENSOR_1";
			io-channels = <&adc0 2>;
		};
		adc_temp_sensor_2: temp_sensor_2 {
			enum-name = "ADC_TEMP_SENSOR_2";
			io-channels = <&adc0 3>;
		};
		adc_temp_sensor_3: temp_sensor_3 {
			enum-name = "ADC_TEMP_SENSOR_3";
			io-channels = <&adc0 13>;
		};
	};
	temp_memory_thermistor: memory {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_1>;
	};
	temp_charger_thermistor: charger {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_2>;
	};
	temp_ambient_thermistor: ambient {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_3>;
	};
	named-temp-sensors {
		compatible = "cros-ec,temp-sensors";
		temp_memory: memory {
			temp_fan_off = <38>;
			temp_fan_max = <76>;
			temp_host_high = <102>;
			temp_host_halt = <104>;
			temp_host_release_high = <94>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_memory_thermistor>;
		};
		temp_charger: charger {
			temp_fan_off = <35>;
			temp_fan_max = <60>;
			temp_host_high = <85>;
			temp_host_halt = <90>;
			temp_host_release_high = <80>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_charger_thermistor>;
		};
		temp_ambient: ambient {
			temp_fan_off = <35>;
			temp_fan_max = <60>;
			temp_host_high = <85>;
			temp_host_halt = <90>;
			temp_host_release_high = <80>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_ambient_thermistor>;
		};
	};
};

&i2c4 {
	tcpci_emul_0: tcpci_emul@82 {
		compatible = "cros,tcpci-generic-emul";
		status = "okay";
		reg = <0x82>;
	};
};

&i2c4 {
	tcpci_emul_1: tcpci_emul@84 {
		compatible = "cros,tcpci-generic-emul";
		status = "okay";
		reg = <0x84>;
	};
	anx7483_port1: anx7483_emul1@3e {
		compatible = "cros,anx7483-emul", "analogix,anx7483";
		reg = <0x3e>;
		board-set = "board_anx7483_c1_mux_set";
	};
};
&thermistor_3V3_51K1_47K_4050B  {
	status = "okay";
};
