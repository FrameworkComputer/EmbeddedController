/* Copyright 2024 The ChromiumOS Authors
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file.
 */
#include <cros/thermistor/thermistor.dtsi>
#include <dt-bindings/pwm/pwm.h>
#include <it8xxx2_emul.dts>
#include "../program/nissa/yavilla/cbi.dtsi"
#include "../program/nissa/yavilla/motionsense.dtsi"
#include <cros/vivaldi_kbd_default.dtsi>

/ {
	named-gpios {
		compatible = "named-gpios";

		gpio_ec_entering_rw: ec_entering_rw {
			gpios = <&gpioc 7 GPIO_OUTPUT>;
			enum-name = "GPIO_ENTERING_RW";
		};
		gpio_en_usb_a0_vbus: en_usb_a0_vbus {
			gpios = <&gpiol 6 GPIO_OUTPUT>;
		};
		gpio_en_usb_a1_vbus: en_usb_a1_vbus {
			gpios = <&gpiof 0 GPIO_OUTPUT>;
		};
		gpio_en_usb_c0_cc1_vconn: en_usb_c0_cc1_vconn {
			gpios = <&gpioh 4 GPIO_OUTPUT>;
		};
		gpio_en_usb_c0_cc2_vconn: en_usb_c0_cc2_vconn {
			gpios = <&gpioh 6 GPIO_OUTPUT>;
		};
		gpio_usb_c0_int_odl: usb_c0_int_odl {
			gpios = <&gpiok 0 GPIO_INPUT_PULL_UP>;
		};
		gpio_usb_c1_int_odl: usb_c1_int_odl {
			gpios = <&gpioe 6 GPIO_INPUT_PULL_UP>;
		};
		gpio_fan_enable: fan-enable {
			gpios = <&gpioa 1 GPIO_OUTPUT>;
			no-auto-init;
		};
		gpio_acc_int_l: acc_int_l {
			gpios = <&gpioc 0 GPIO_INPUT>;
		};
		gpio_imu_int_l: imu_int_l {
			gpios = <&gpioj 0 GPIO_INPUT>;
		};
		gpio_ec_edp_bl_en_od: ec_edp_bl_en_od {
			gpios = <&gpiok 4 GPIO_ODR_HIGH>;
			enum-name = "GPIO_ENABLE_BACKLIGHT";
		};
		gpio_lid_open: lid_open {
			gpios = <&gpiof 3 GPIO_INPUT>;
			enum-name = "GPIO_LID_OPEN";
		};
		gpio_ec_soc_dsw_pwrok: ec_soc_dsw_pwrok {
			gpios = <&gpiol 7 GPIO_OUTPUT>;
			no-auto-init;
		};
		gpio_c1_charger_led_white_l: c1_charger_led_white_l {
			gpios = <&gpiol 4 GPIO_OUTPUT_HIGH>;
		};
		gpio_c1_charger_led_amber_l: c1_charger_led_amber_l {
			gpios = <&gpiod 4 GPIO_OUTPUT_HIGH>;
		};
		gpio_c0_charger_led_white_l: c0_charger_led_white_l {
			gpios = <&gpioc 3 GPIO_OUTPUT_HIGH>;
		};
		gpio_c0_charger_led_amber_l: c0_charger_led_amber_l {
			gpios = <&gpioj 7 GPIO_OUTPUT_HIGH>;
		};
		gpio_pen_detect_odl: pen_detect_odl {
			gpios = <&gpioj 1 GPIO_INPUT>;
		};
		gpio_en_pp5000_pen_x: en_pp5000_pen_x {
			gpios = <&gpiob 5 GPIO_OUTPUT>;
		};
		gpio_tablet_mode_l: tablet_mode_l {
			gpios = <&gpioa 7 GPIO_INPUT>;
			enum-name = "GPIO_TABLET_MODE_L";
		};
	};

	gpio-interrupts {
		compatible = "cros-ec,gpio-interrupts";

		int_acc: lid_imu {
		  irq-pin = <&gpio_acc_int_l>;
		  flags = <GPIO_INT_EDGE_FALLING>;
		  handler = "bma4xx_interrupt";
		};
		int_imu: ec_imu {
			irq-pin = <&gpio_imu_int_l>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "bmi3xx_interrupt";
		};
		int_usb_c0: usb_c0 {
			irq-pin = <&gpio_usb_c0_int_odl>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_c0_interrupt";
		};
		int_usb_c1: usb_c1 {
			irq-pin = <&gpio_usb_c1_int_odl>;
			flags = <GPIO_INT_EDGE_FALLING>;
			handler = "usb_c1_interrupt";
		};
		int_lid_open: lid_open {
			irq-pin = <&gpio_lid_open>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "lid_interrupt";
		};
		int_pen_det_l: pen_det_l {
			irq-pin = <&gpio_pen_detect_odl>;
			flags = <GPIO_INT_EDGE_BOTH>;
			handler = "pen_detect_interrupt";
		};
	};

	named-i2c-ports {
		compatible = "named-i2c-ports";

		i2c_ec_i2c_batt: ec_i2c_batt {
			i2c-port = <&i2c0>;
			enum-names = "I2C_PORT_BATTERY";
		};
		i2c_ec_i2c_sensor: ec_i2c_sensor {
			i2c-port = <&i2c2>;
			enum-names = "I2C_PORT_SENSOR";
		};
		i2c_ec_i2c_sub_usb_c1: ec_i2c_sub_usb_c1 {
			i2c-port = <&i2c4>;
			enum-names = "I2C_PORT_USB_C1_TCPC";
		};
		i2c_ec_i2c_usb_c0: ec_i2c_usb_c0 {
			i2c-port = <&i2c5>;
			enum-names = "I2C_PORT_USB_C0_TCPC";
		};
	};

	usba {
		compatible = "cros-ec,usba-port-enable-pins";
		/*
		 * ILIM_SEL pins are referred to by legacy enum name,
		 * GPIO_USB*_ILIM_SEL.
		 */
		enable-pins = <&gpio_en_usb_a0_vbus &gpio_en_usb_a1_vbus>;
		status = "okay";
	};

	usbc {
		#address-cells = <1>;
		#size-cells = <0>;
		port0@0 {
			compatible = "named-usbc-port";
			reg = <0>;
			tcpc = <&tcpci_emul_0>;
			usb-mux-chain-0 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_0>;
			};
		};
		port1@1 {
			compatible = "named-usbc-port";
			reg = <1>;
			tcpc = <&tcpci_emul_1>;
			usb-mux-chain-1 {
				compatible = "cros-ec,usb-mux-chain";
				usb-muxes = <&virtual_mux_1>;
			};
			usb_mux_chain_1_no_mux: usb-mux-chain-1-no-mux {
				compatible = "cros-ec,usb-mux-chain";
				alternative-chain;
				usb-muxes = <&virtual_mux_1>;
			};
		};
		port0-muxes {
			virtual_mux_0: virtual-mux-0 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
		port1-muxes {
			virtual_mux_1: virtual-mux-1 {
				compatible = "cros-ec,usbc-mux-virtual";
			};
		};
	};

	pwms {
		#address-cells = <1>;
		#size-cells = <1>;

		pwm2: pwm@6 {
			compatible = "cros,pwm-mock";
			reg = <6 2>;
			#pwm-cells = <3>;
			status = "okay";
		};
	};

	tachs {
		#address-cells = <1>;
		#size-cells = <1>;

		tach1: tach@1 {
			compatible = "cros,tach-mock";
			reg = <1 1>;
			#tach-cells = <3>;
			status = "okay";
		};
	};

	fans {
		compatible = "cros-ec,fans";

		fan0: fan_0 {
			pwms = <&pwm2 2 PWM_KHZ(25) PWM_POLARITY_NORMAL>;
			tach = <&tach1>;
			rpm_min = <2500>;
			rpm_start = <2500>;
			rpm_max = <4700>;
			rpm_deviation = <1>;
			enable_gpio = <&gpio_fan_enable>;
		};
	};

	fan_steps {
		compatible = "cros-ec,fan-steps";
		level_0 {
			temp_on = <43 47 0>;
			temp_off = <99 99 99>;
			rpm_target = <0>;
		};
		level_1 {
			temp_on = <46 48 0>;
			temp_off = <40 45 99>;
			rpm_target = <2600>;
		};
		level_2 {
			temp_on = <49 49 0>;
			temp_off = <44 46 99>;
			rpm_target = <2800>;
		};
		level_3 {
			temp_on = <53 50 54>;
			temp_off = <47 47 51>;
			rpm_target = <3100>;
		};
		level_4 {
			temp_on = <56 56 60>;
			temp_off = <51 48 52>;
			rpm_target = <3300>;
		};
		level_5 {
			temp_on = <60 60 64>;
			temp_off = <54 52 56>;
			rpm_target = <3600>;
		};
		level_6 {
			temp_on = <100 100 100>;
			temp_off = <58 54 58>;
			rpm_target = <4000>;
		};
	};

	named-adc-channels {
		compatible = "named-adc-channels";

		adc_temp_sensor_1: temp_sensor_1 {
			enum-name = "ADC_TEMP_SENSOR_1";
			io-channels = <&adc0 2>;
		};
		adc_temp_sensor_2: temp_sensor_2 {
			enum-name = "ADC_TEMP_SENSOR_2";
			io-channels = <&adc0 3>;
		};
		adc_temp_sensor_3: temp_sensor_3 {
			enum-name = "ADC_TEMP_SENSOR_3";
			io-channels = <&adc0 13>;
		};
	};

	temp_cpu_thermistor: cpu {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_1>;
	};
	temp_5v_regulator_thermistor: 5v-regulator {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_2>;
	};
	temp_charger_thermistor: charger {
		compatible = "cros-ec,temp-sensor-thermistor";
		thermistor = <&thermistor_3V3_51K1_47K_4050B>;
		adc = <&adc_temp_sensor_3>;
	};

	named-temp-sensors {
		compatible = "cros-ec,temp-sensors";
		temp_cpu: cpu {
			temp_fan_off = <45>;
			temp_fan_max = <60>;
			temp_host_high = <75>;
			temp_host_halt = <85>;
			temp_host_release_high = <65>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_cpu_thermistor>;
		};
		temp_5v_regulator: 5v-regulator {
			temp_fan_off = <50>;
			temp_fan_max = <65>;
			temp_host_high = <75>;
			temp_host_halt = <85>;
			temp_host_release_high = <65>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_5v_regulator_thermistor>;
		};
		temp_charger: charger {
			temp_fan_off = <50>;
			temp_fan_max = <65>;
			temp_host_high = <80>;
			temp_host_halt = <85>;
			temp_host_release_high = <75>;
			power-good-pin = <&gpio_ec_soc_dsw_pwrok>;
			sensor = <&temp_charger_thermistor>;
		};
	};
};

&i2c4 {
	tcpci_emul_0: tcpci_emul@82 {
		compatible = "cros,tcpci-generic-emul";
		status = "okay";
		reg = <0x82>;
	};
};

&i2c5 {
	tcpci_emul_1: tcpci_emul@84 {
		compatible = "cros,tcpci-generic-emul";
		status = "okay";
		reg = <0x84>;
	};
};

&thermistor_3V3_51K1_47K_4050B  {
	status = "okay";
};

&vivaldi_kbd {
	status = "okay";

	kbd_config_1: kbd-config-1 {
		vivaldi-codes = <0 0 0 0 0 0 0 0 0 0>;
		capabilities = <0>;
	};
};
